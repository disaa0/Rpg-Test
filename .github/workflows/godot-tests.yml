name: "Godot Project Tests"

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]
    types: [opened, synchronize, reopened]

jobs:
  test:
    name: Run Godot Unit Tests
    runs-on: ubuntu-latest

    # Add concurrency to prevent multiple workflows running simultaneously on same PR
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          lfs: true
          fetch-depth: 0 # Fetch all history for proper diff analysis

      # Check for test file changes in PRs
      - name: Check files changed
        id: files_changed
        if: github.event_name == 'pull_request'
        run: |
          echo "Changed files in this PR:"
          git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }}

          if git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -q '\.gd\|\.tscn'; then
            echo "godot_files_changed=true" >> $GITHUB_OUTPUT
          else
            echo "godot_files_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Run Godot Tests
        uses: croconut/godot-tester@v5.2
        with:
          version: "4.2.2"
          release_type: "stable"
          custom-godot-dl-url: "https://github.com/godotengine/godot/releases/download/4.2.2-stable/Godot_v4.2.2-stable_linux.x86_64.zip"
          custom-godot-binary-path: "Godot_v4.2.2-stable_linux.x86_64"
          path: "./"
          is-mono: false
          import-time: 150
          test-timeout: 300
          minimum-pass: 0.95
          test-dir: "res://Test"
          assert-check: false
          max-fails: 10
          result-output-file: "test_results.xml"

      # Create a comment on PRs with test results
      - name: Process Test Results
        id: process_results
        if: always() && github.event_name == 'pull_request'
        run: |
          if [ -f test_results.xml ]; then
            echo "Test results found, processing..."
            # Extract basic stats
            TOTAL_TESTS=$(grep -c "<testcase" test_results.xml || echo "0")
            FAILURES=$(grep -c "<failure" test_results.xml || echo "0")
            
            echo "total=$TOTAL_TESTS" >> $GITHUB_OUTPUT
            echo "failures=$FAILURES" >> $GITHUB_OUTPUT
            
            # Create a summary for the PR comment
            echo "### 🎮 Godot Test Results" > test_summary.md
            echo "- **Total Tests:** $TOTAL_TESTS" >> test_summary.md
            echo "- **Failures:** $FAILURES" >> test_summary.md
            
            if [ "$FAILURES" -gt 0 ]; then
              echo "⚠️ Some tests failed. Check the artifacts for details." >> test_summary.md
            else
              echo "✅ All tests passed!" >> test_summary.md
            fi
          else
            echo "No test results found"
            echo "total=0" >> $GITHUB_OUTPUT
            echo "failures=0" >> $GITHUB_OUTPUT
          fi

      - name: Comment on PR
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            let summary = '';

            try {
              summary = fs.readFileSync('test_summary.md', 'utf8');
            } catch (error) {
              summary = '### 🎮 Godot Test Results\nUnable to process test results';
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            ./test_results.xml
            ./**/*test_output.txt
          retention-days: 5

  # Add a separate job for code quality checks
  lint:
    name: GDScript Lint
    runs-on: ubuntu-latest
    container:
      image: barichello/godot-ci:4.2

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          lfs: true

      - name: Run GDScript Lint
        run: |
          # Create lint directory for results
          mkdir -p lint_results

          # First check which files to lint (exclude addons and test files)
          echo "Finding GDScript files to lint..."
          FILES_TO_LINT=$(find . -name "*.gd" -not -path "*/addons/*" -not -path "*/Test/*" -type f)
          
          # Count how many files we'll lint
          FILE_COUNT=$(echo "$FILES_TO_LINT" | wc -l)
          echo "Found $FILE_COUNT files to lint"
          
          # Run lint on each file
          echo "$FILES_TO_LINT" | while read -r file; do
            if [ -f "$file" ]; then
              echo "Linting $file"
              # Run linting but don't fail if there's an error
              godot --headless --quiet --check-only "$file" >> lint_results/lint_output.txt 2>&1 || true
            fi
          done

          # Summary of lint results
          if [ -s lint_results/lint_output.txt ]; then
            echo "Lint issues found:"
            cat lint_results/lint_output.txt
            # Don't fail the build for lint issues yet
            echo "Linting completed with warnings/errors"
          else
            echo "No lint issues found! All files passed."
          fi

      - name: Upload Lint Results
        uses: actions/upload-artifact@v4
        with:
          name: lint-results
          path: ./lint_results/
          retention-days: 5
